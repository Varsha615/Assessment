Question 2

# models.py
import threading
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
import time

# Define a model
class MyModel(models.Model):
    name = models.CharField(max_length=100)

# Signal receiver
@receiver(post_save, sender=MyModel)
def my_signal_receiver(sender, instance, created, **kwargs):
    current_thread = threading.current_thread().name
    print(f"Signal received for {instance.name} in thread: {current_thread}")
    time.sleep(2)  # Simulating a time-consuming task
    print("Signal processing completed.")

# In Django shell or views.py
# This code simulates saving an instance in a separate thread
def save_instance():
    new_instance = MyModel(name="Test Instance")
    new_instance.save()  # This will trigger the post_save signal
    print("MyModel instance saved in thread:", threading.current_thread().name)

# Create and start a new thread
thread = threading.Thread(target=save_instance, name='SaveThread')
thread.start()
thread.join()  # Wait for the thread to finish
